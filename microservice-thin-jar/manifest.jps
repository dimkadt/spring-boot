type: install
version: 1.4
id: spriing-boot-thin-jar
name: Spring Boot Thin Jar Builder
baseUrl: https://raw.githubusercontent.com/jelastic-jps/spring-boot/master
logo: /images/spring-boot-logo.png
homepage: https://github.com/jelastic-jps/spring-boot/tree/master/microservice-thin-jar
description: 
    text: /text/description-thin-jar.md 
    short: This package consists of Maven and Spring Boot framework inside Java Engine node. It automates building a sample Java project as Thin Jar to run it as a microservice

categories:
  - apps/dev-and-admin-tools
  - apps/microservices

globals:
  projectName: myapp

settings:
  fields:
    - type: string
      caption: Git Repo
      name: gitUrl
      default: https://github.com/jelastic/java-packaging-demo.git
      required: true
      
    - type: string
      caption: Work Directory
      name: workDir
      default: spring-boot-thin
 
ssl: true  

nodes:
- cloudlets: 16
  nodeGroup: build
  nodeType: maven
  engine: openjdk19

- cloudlets: 8
  nodeType: springboot
  nodeGroup: cp
  engine: openjdk19

onInstall:
  - configureApp
  - addBuildProject        
  - buildDeployProject

actions:
  configureApp:
    cmd [build, cp]: |-
      VARIABLES_CONF="/opt/maven/conf/variables.conf";
      [ ! -f $VARIABLES_CONF ] && VARIABLES_CONF="/home/jelastic/conf/variables.conf"
      echo -e "-Dthin.debug=true\n-Dthin.repo=https://repo1.maven.org/maven2" >> $VARIABLES_CONF
      
  addBuildProject:
    - api: env.deployment.AddBuildProject
      name: ${globals.projectName}
      nodeId: ${nodes.build.first.id}
      repo: ${settings.gitUrl}
      settings:
        workDir: ${settings.workDir}
      deployment:
        envName: ${env.envName}
        nodeGroup: cp
  
  buildDeployProject:
    api: env.deployment.BuildDeployProject
    nodeId: ${nodes.build.first.id}
    project: ${globals.projectName}
    skipUpload: true

success: /text/success-thin-jar.md
startPage: api/greeting
